// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: chat/v1/chat.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/harmony-development/inviter/gen/harmonytypes/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_chat_v1_chat_proto protoreflect.FileDescriptor

var file_chat_v1_chat_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x83, 0x22, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x45,
	0x6d, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x45, 0x6d, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x6d, 0x6f, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x44,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x69, 0x70, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x61, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x54, 0x79, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x34, 0x5a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x72, 0x6d,
	0x6f, 0x6e, 0x79, 0x2d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_chat_v1_chat_proto_goTypes = []interface{}{
	(*CreateGuildRequest)(nil),               // 0: protocol.chat.v1.CreateGuildRequest
	(*CreateInviteRequest)(nil),              // 1: protocol.chat.v1.CreateInviteRequest
	(*CreateChannelRequest)(nil),             // 2: protocol.chat.v1.CreateChannelRequest
	(*CreateEmotePackRequest)(nil),           // 3: protocol.chat.v1.CreateEmotePackRequest
	(*GetGuildListRequest)(nil),              // 4: protocol.chat.v1.GetGuildListRequest
	(*AddGuildToGuildListRequest)(nil),       // 5: protocol.chat.v1.AddGuildToGuildListRequest
	(*RemoveGuildFromGuildListRequest)(nil),  // 6: protocol.chat.v1.RemoveGuildFromGuildListRequest
	(*GetGuildRequest)(nil),                  // 7: protocol.chat.v1.GetGuildRequest
	(*GetGuildInvitesRequest)(nil),           // 8: protocol.chat.v1.GetGuildInvitesRequest
	(*GetGuildMembersRequest)(nil),           // 9: protocol.chat.v1.GetGuildMembersRequest
	(*GetGuildChannelsRequest)(nil),          // 10: protocol.chat.v1.GetGuildChannelsRequest
	(*GetChannelMessagesRequest)(nil),        // 11: protocol.chat.v1.GetChannelMessagesRequest
	(*GetMessageRequest)(nil),                // 12: protocol.chat.v1.GetMessageRequest
	(*GetEmotePacksRequest)(nil),             // 13: protocol.chat.v1.GetEmotePacksRequest
	(*GetEmotePackEmotesRequest)(nil),        // 14: protocol.chat.v1.GetEmotePackEmotesRequest
	(*UpdateGuildInformationRequest)(nil),    // 15: protocol.chat.v1.UpdateGuildInformationRequest
	(*UpdateChannelInformationRequest)(nil),  // 16: protocol.chat.v1.UpdateChannelInformationRequest
	(*UpdateChannelOrderRequest)(nil),        // 17: protocol.chat.v1.UpdateChannelOrderRequest
	(*UpdateMessageRequest)(nil),             // 18: protocol.chat.v1.UpdateMessageRequest
	(*AddEmoteToPackRequest)(nil),            // 19: protocol.chat.v1.AddEmoteToPackRequest
	(*DeleteGuildRequest)(nil),               // 20: protocol.chat.v1.DeleteGuildRequest
	(*DeleteInviteRequest)(nil),              // 21: protocol.chat.v1.DeleteInviteRequest
	(*DeleteChannelRequest)(nil),             // 22: protocol.chat.v1.DeleteChannelRequest
	(*DeleteMessageRequest)(nil),             // 23: protocol.chat.v1.DeleteMessageRequest
	(*DeleteEmoteFromPackRequest)(nil),       // 24: protocol.chat.v1.DeleteEmoteFromPackRequest
	(*DeleteEmotePackRequest)(nil),           // 25: protocol.chat.v1.DeleteEmotePackRequest
	(*DequipEmotePackRequest)(nil),           // 26: protocol.chat.v1.DequipEmotePackRequest
	(*JoinGuildRequest)(nil),                 // 27: protocol.chat.v1.JoinGuildRequest
	(*LeaveGuildRequest)(nil),                // 28: protocol.chat.v1.LeaveGuildRequest
	(*TriggerActionRequest)(nil),             // 29: protocol.chat.v1.TriggerActionRequest
	(*SendMessageRequest)(nil),               // 30: protocol.chat.v1.SendMessageRequest
	(*QueryPermissionsRequest)(nil),          // 31: protocol.chat.v1.QueryPermissionsRequest
	(*SetPermissionsRequest)(nil),            // 32: protocol.chat.v1.SetPermissionsRequest
	(*GetPermissionsRequest)(nil),            // 33: protocol.chat.v1.GetPermissionsRequest
	(*MoveRoleRequest)(nil),                  // 34: protocol.chat.v1.MoveRoleRequest
	(*GetGuildRolesRequest)(nil),             // 35: protocol.chat.v1.GetGuildRolesRequest
	(*AddGuildRoleRequest)(nil),              // 36: protocol.chat.v1.AddGuildRoleRequest
	(*ModifyGuildRoleRequest)(nil),           // 37: protocol.chat.v1.ModifyGuildRoleRequest
	(*DeleteGuildRoleRequest)(nil),           // 38: protocol.chat.v1.DeleteGuildRoleRequest
	(*ManageUserRolesRequest)(nil),           // 39: protocol.chat.v1.ManageUserRolesRequest
	(*GetUserRolesRequest)(nil),              // 40: protocol.chat.v1.GetUserRolesRequest
	(*StreamEventsRequest)(nil),              // 41: protocol.chat.v1.StreamEventsRequest
	(*GetUserRequest)(nil),                   // 42: protocol.chat.v1.GetUserRequest
	(*GetUserMetadataRequest)(nil),           // 43: protocol.chat.v1.GetUserMetadataRequest
	(*ProfileUpdateRequest)(nil),             // 44: protocol.chat.v1.ProfileUpdateRequest
	(*TypingRequest)(nil),                    // 45: protocol.chat.v1.TypingRequest
	(*CreateGuildResponse)(nil),              // 46: protocol.chat.v1.CreateGuildResponse
	(*CreateInviteResponse)(nil),             // 47: protocol.chat.v1.CreateInviteResponse
	(*CreateChannelResponse)(nil),            // 48: protocol.chat.v1.CreateChannelResponse
	(*CreateEmotePackResponse)(nil),          // 49: protocol.chat.v1.CreateEmotePackResponse
	(*GetGuildListResponse)(nil),             // 50: protocol.chat.v1.GetGuildListResponse
	(*AddGuildToGuildListResponse)(nil),      // 51: protocol.chat.v1.AddGuildToGuildListResponse
	(*RemoveGuildFromGuildListResponse)(nil), // 52: protocol.chat.v1.RemoveGuildFromGuildListResponse
	(*GetGuildResponse)(nil),                 // 53: protocol.chat.v1.GetGuildResponse
	(*GetGuildInvitesResponse)(nil),          // 54: protocol.chat.v1.GetGuildInvitesResponse
	(*GetGuildMembersResponse)(nil),          // 55: protocol.chat.v1.GetGuildMembersResponse
	(*GetGuildChannelsResponse)(nil),         // 56: protocol.chat.v1.GetGuildChannelsResponse
	(*GetChannelMessagesResponse)(nil),       // 57: protocol.chat.v1.GetChannelMessagesResponse
	(*GetMessageResponse)(nil),               // 58: protocol.chat.v1.GetMessageResponse
	(*GetEmotePacksResponse)(nil),            // 59: protocol.chat.v1.GetEmotePacksResponse
	(*GetEmotePackEmotesResponse)(nil),       // 60: protocol.chat.v1.GetEmotePackEmotesResponse
	(*empty.Empty)(nil),                      // 61: google.protobuf.Empty
	(*JoinGuildResponse)(nil),                // 62: protocol.chat.v1.JoinGuildResponse
	(*SendMessageResponse)(nil),              // 63: protocol.chat.v1.SendMessageResponse
	(*QueryPermissionsResponse)(nil),         // 64: protocol.chat.v1.QueryPermissionsResponse
	(*GetPermissionsResponse)(nil),           // 65: protocol.chat.v1.GetPermissionsResponse
	(*MoveRoleResponse)(nil),                 // 66: protocol.chat.v1.MoveRoleResponse
	(*GetGuildRolesResponse)(nil),            // 67: protocol.chat.v1.GetGuildRolesResponse
	(*AddGuildRoleResponse)(nil),             // 68: protocol.chat.v1.AddGuildRoleResponse
	(*GetUserRolesResponse)(nil),             // 69: protocol.chat.v1.GetUserRolesResponse
	(*Event)(nil),                            // 70: protocol.chat.v1.Event
	(*GetUserResponse)(nil),                  // 71: protocol.chat.v1.GetUserResponse
	(*GetUserMetadataResponse)(nil),          // 72: protocol.chat.v1.GetUserMetadataResponse
}
var file_chat_v1_chat_proto_depIdxs = []int32{
	0,  // 0: protocol.chat.v1.ChatService.CreateGuild:input_type -> protocol.chat.v1.CreateGuildRequest
	1,  // 1: protocol.chat.v1.ChatService.CreateInvite:input_type -> protocol.chat.v1.CreateInviteRequest
	2,  // 2: protocol.chat.v1.ChatService.CreateChannel:input_type -> protocol.chat.v1.CreateChannelRequest
	3,  // 3: protocol.chat.v1.ChatService.CreateEmotePack:input_type -> protocol.chat.v1.CreateEmotePackRequest
	4,  // 4: protocol.chat.v1.ChatService.GetGuildList:input_type -> protocol.chat.v1.GetGuildListRequest
	5,  // 5: protocol.chat.v1.ChatService.AddGuildToGuildList:input_type -> protocol.chat.v1.AddGuildToGuildListRequest
	6,  // 6: protocol.chat.v1.ChatService.RemoveGuildFromGuildList:input_type -> protocol.chat.v1.RemoveGuildFromGuildListRequest
	7,  // 7: protocol.chat.v1.ChatService.GetGuild:input_type -> protocol.chat.v1.GetGuildRequest
	8,  // 8: protocol.chat.v1.ChatService.GetGuildInvites:input_type -> protocol.chat.v1.GetGuildInvitesRequest
	9,  // 9: protocol.chat.v1.ChatService.GetGuildMembers:input_type -> protocol.chat.v1.GetGuildMembersRequest
	10, // 10: protocol.chat.v1.ChatService.GetGuildChannels:input_type -> protocol.chat.v1.GetGuildChannelsRequest
	11, // 11: protocol.chat.v1.ChatService.GetChannelMessages:input_type -> protocol.chat.v1.GetChannelMessagesRequest
	12, // 12: protocol.chat.v1.ChatService.GetMessage:input_type -> protocol.chat.v1.GetMessageRequest
	13, // 13: protocol.chat.v1.ChatService.GetEmotePacks:input_type -> protocol.chat.v1.GetEmotePacksRequest
	14, // 14: protocol.chat.v1.ChatService.GetEmotePackEmotes:input_type -> protocol.chat.v1.GetEmotePackEmotesRequest
	15, // 15: protocol.chat.v1.ChatService.UpdateGuildInformation:input_type -> protocol.chat.v1.UpdateGuildInformationRequest
	16, // 16: protocol.chat.v1.ChatService.UpdateChannelInformation:input_type -> protocol.chat.v1.UpdateChannelInformationRequest
	17, // 17: protocol.chat.v1.ChatService.UpdateChannelOrder:input_type -> protocol.chat.v1.UpdateChannelOrderRequest
	18, // 18: protocol.chat.v1.ChatService.UpdateMessage:input_type -> protocol.chat.v1.UpdateMessageRequest
	19, // 19: protocol.chat.v1.ChatService.AddEmoteToPack:input_type -> protocol.chat.v1.AddEmoteToPackRequest
	20, // 20: protocol.chat.v1.ChatService.DeleteGuild:input_type -> protocol.chat.v1.DeleteGuildRequest
	21, // 21: protocol.chat.v1.ChatService.DeleteInvite:input_type -> protocol.chat.v1.DeleteInviteRequest
	22, // 22: protocol.chat.v1.ChatService.DeleteChannel:input_type -> protocol.chat.v1.DeleteChannelRequest
	23, // 23: protocol.chat.v1.ChatService.DeleteMessage:input_type -> protocol.chat.v1.DeleteMessageRequest
	24, // 24: protocol.chat.v1.ChatService.DeleteEmoteFromPack:input_type -> protocol.chat.v1.DeleteEmoteFromPackRequest
	25, // 25: protocol.chat.v1.ChatService.DeleteEmotePack:input_type -> protocol.chat.v1.DeleteEmotePackRequest
	26, // 26: protocol.chat.v1.ChatService.DequipEmotePack:input_type -> protocol.chat.v1.DequipEmotePackRequest
	27, // 27: protocol.chat.v1.ChatService.JoinGuild:input_type -> protocol.chat.v1.JoinGuildRequest
	28, // 28: protocol.chat.v1.ChatService.LeaveGuild:input_type -> protocol.chat.v1.LeaveGuildRequest
	29, // 29: protocol.chat.v1.ChatService.TriggerAction:input_type -> protocol.chat.v1.TriggerActionRequest
	30, // 30: protocol.chat.v1.ChatService.SendMessage:input_type -> protocol.chat.v1.SendMessageRequest
	31, // 31: protocol.chat.v1.ChatService.QueryHasPermission:input_type -> protocol.chat.v1.QueryPermissionsRequest
	32, // 32: protocol.chat.v1.ChatService.SetPermissions:input_type -> protocol.chat.v1.SetPermissionsRequest
	33, // 33: protocol.chat.v1.ChatService.GetPermissions:input_type -> protocol.chat.v1.GetPermissionsRequest
	34, // 34: protocol.chat.v1.ChatService.MoveRole:input_type -> protocol.chat.v1.MoveRoleRequest
	35, // 35: protocol.chat.v1.ChatService.GetGuildRoles:input_type -> protocol.chat.v1.GetGuildRolesRequest
	36, // 36: protocol.chat.v1.ChatService.AddGuildRole:input_type -> protocol.chat.v1.AddGuildRoleRequest
	37, // 37: protocol.chat.v1.ChatService.ModifyGuildRole:input_type -> protocol.chat.v1.ModifyGuildRoleRequest
	38, // 38: protocol.chat.v1.ChatService.DeleteGuildRole:input_type -> protocol.chat.v1.DeleteGuildRoleRequest
	39, // 39: protocol.chat.v1.ChatService.ManageUserRoles:input_type -> protocol.chat.v1.ManageUserRolesRequest
	40, // 40: protocol.chat.v1.ChatService.GetUserRoles:input_type -> protocol.chat.v1.GetUserRolesRequest
	41, // 41: protocol.chat.v1.ChatService.StreamEvents:input_type -> protocol.chat.v1.StreamEventsRequest
	42, // 42: protocol.chat.v1.ChatService.GetUser:input_type -> protocol.chat.v1.GetUserRequest
	43, // 43: protocol.chat.v1.ChatService.GetUserMetadata:input_type -> protocol.chat.v1.GetUserMetadataRequest
	44, // 44: protocol.chat.v1.ChatService.ProfileUpdate:input_type -> protocol.chat.v1.ProfileUpdateRequest
	45, // 45: protocol.chat.v1.ChatService.Typing:input_type -> protocol.chat.v1.TypingRequest
	46, // 46: protocol.chat.v1.ChatService.CreateGuild:output_type -> protocol.chat.v1.CreateGuildResponse
	47, // 47: protocol.chat.v1.ChatService.CreateInvite:output_type -> protocol.chat.v1.CreateInviteResponse
	48, // 48: protocol.chat.v1.ChatService.CreateChannel:output_type -> protocol.chat.v1.CreateChannelResponse
	49, // 49: protocol.chat.v1.ChatService.CreateEmotePack:output_type -> protocol.chat.v1.CreateEmotePackResponse
	50, // 50: protocol.chat.v1.ChatService.GetGuildList:output_type -> protocol.chat.v1.GetGuildListResponse
	51, // 51: protocol.chat.v1.ChatService.AddGuildToGuildList:output_type -> protocol.chat.v1.AddGuildToGuildListResponse
	52, // 52: protocol.chat.v1.ChatService.RemoveGuildFromGuildList:output_type -> protocol.chat.v1.RemoveGuildFromGuildListResponse
	53, // 53: protocol.chat.v1.ChatService.GetGuild:output_type -> protocol.chat.v1.GetGuildResponse
	54, // 54: protocol.chat.v1.ChatService.GetGuildInvites:output_type -> protocol.chat.v1.GetGuildInvitesResponse
	55, // 55: protocol.chat.v1.ChatService.GetGuildMembers:output_type -> protocol.chat.v1.GetGuildMembersResponse
	56, // 56: protocol.chat.v1.ChatService.GetGuildChannels:output_type -> protocol.chat.v1.GetGuildChannelsResponse
	57, // 57: protocol.chat.v1.ChatService.GetChannelMessages:output_type -> protocol.chat.v1.GetChannelMessagesResponse
	58, // 58: protocol.chat.v1.ChatService.GetMessage:output_type -> protocol.chat.v1.GetMessageResponse
	59, // 59: protocol.chat.v1.ChatService.GetEmotePacks:output_type -> protocol.chat.v1.GetEmotePacksResponse
	60, // 60: protocol.chat.v1.ChatService.GetEmotePackEmotes:output_type -> protocol.chat.v1.GetEmotePackEmotesResponse
	61, // 61: protocol.chat.v1.ChatService.UpdateGuildInformation:output_type -> google.protobuf.Empty
	61, // 62: protocol.chat.v1.ChatService.UpdateChannelInformation:output_type -> google.protobuf.Empty
	61, // 63: protocol.chat.v1.ChatService.UpdateChannelOrder:output_type -> google.protobuf.Empty
	61, // 64: protocol.chat.v1.ChatService.UpdateMessage:output_type -> google.protobuf.Empty
	61, // 65: protocol.chat.v1.ChatService.AddEmoteToPack:output_type -> google.protobuf.Empty
	61, // 66: protocol.chat.v1.ChatService.DeleteGuild:output_type -> google.protobuf.Empty
	61, // 67: protocol.chat.v1.ChatService.DeleteInvite:output_type -> google.protobuf.Empty
	61, // 68: protocol.chat.v1.ChatService.DeleteChannel:output_type -> google.protobuf.Empty
	61, // 69: protocol.chat.v1.ChatService.DeleteMessage:output_type -> google.protobuf.Empty
	61, // 70: protocol.chat.v1.ChatService.DeleteEmoteFromPack:output_type -> google.protobuf.Empty
	61, // 71: protocol.chat.v1.ChatService.DeleteEmotePack:output_type -> google.protobuf.Empty
	61, // 72: protocol.chat.v1.ChatService.DequipEmotePack:output_type -> google.protobuf.Empty
	62, // 73: protocol.chat.v1.ChatService.JoinGuild:output_type -> protocol.chat.v1.JoinGuildResponse
	61, // 74: protocol.chat.v1.ChatService.LeaveGuild:output_type -> google.protobuf.Empty
	61, // 75: protocol.chat.v1.ChatService.TriggerAction:output_type -> google.protobuf.Empty
	63, // 76: protocol.chat.v1.ChatService.SendMessage:output_type -> protocol.chat.v1.SendMessageResponse
	64, // 77: protocol.chat.v1.ChatService.QueryHasPermission:output_type -> protocol.chat.v1.QueryPermissionsResponse
	61, // 78: protocol.chat.v1.ChatService.SetPermissions:output_type -> google.protobuf.Empty
	65, // 79: protocol.chat.v1.ChatService.GetPermissions:output_type -> protocol.chat.v1.GetPermissionsResponse
	66, // 80: protocol.chat.v1.ChatService.MoveRole:output_type -> protocol.chat.v1.MoveRoleResponse
	67, // 81: protocol.chat.v1.ChatService.GetGuildRoles:output_type -> protocol.chat.v1.GetGuildRolesResponse
	68, // 82: protocol.chat.v1.ChatService.AddGuildRole:output_type -> protocol.chat.v1.AddGuildRoleResponse
	61, // 83: protocol.chat.v1.ChatService.ModifyGuildRole:output_type -> google.protobuf.Empty
	61, // 84: protocol.chat.v1.ChatService.DeleteGuildRole:output_type -> google.protobuf.Empty
	61, // 85: protocol.chat.v1.ChatService.ManageUserRoles:output_type -> google.protobuf.Empty
	69, // 86: protocol.chat.v1.ChatService.GetUserRoles:output_type -> protocol.chat.v1.GetUserRolesResponse
	70, // 87: protocol.chat.v1.ChatService.StreamEvents:output_type -> protocol.chat.v1.Event
	71, // 88: protocol.chat.v1.ChatService.GetUser:output_type -> protocol.chat.v1.GetUserResponse
	72, // 89: protocol.chat.v1.ChatService.GetUserMetadata:output_type -> protocol.chat.v1.GetUserMetadataResponse
	61, // 90: protocol.chat.v1.ChatService.ProfileUpdate:output_type -> google.protobuf.Empty
	61, // 91: protocol.chat.v1.ChatService.Typing:output_type -> google.protobuf.Empty
	46, // [46:92] is the sub-list for method output_type
	0,  // [0:46] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_chat_v1_chat_proto_init() }
func file_chat_v1_chat_proto_init() {
	if File_chat_v1_chat_proto != nil {
		return
	}
	file_chat_v1_profile_proto_init()
	file_chat_v1_guilds_proto_init()
	file_chat_v1_channels_proto_init()
	file_chat_v1_messages_proto_init()
	file_chat_v1_emotes_proto_init()
	file_chat_v1_permissions_proto_init()
	file_chat_v1_streaming_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_v1_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_v1_chat_proto_goTypes,
		DependencyIndexes: file_chat_v1_chat_proto_depIdxs,
	}.Build()
	File_chat_v1_chat_proto = out.File
	file_chat_v1_chat_proto_rawDesc = nil
	file_chat_v1_chat_proto_goTypes = nil
	file_chat_v1_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	// This doesn't require any permissions.
	CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error)
	// This requires the "invites.manage.create" permission.
	CreateInvite(ctx context.Context, in *CreateInviteRequest, opts ...grpc.CallOption) (*CreateInviteResponse, error)
	// This requires the "channels.manage.create" permission.
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	CreateEmotePack(ctx context.Context, in *CreateEmotePackRequest, opts ...grpc.CallOption) (*CreateEmotePackResponse, error)
	GetGuildList(ctx context.Context, in *GetGuildListRequest, opts ...grpc.CallOption) (*GetGuildListResponse, error)
	AddGuildToGuildList(ctx context.Context, in *AddGuildToGuildListRequest, opts ...grpc.CallOption) (*AddGuildToGuildListResponse, error)
	RemoveGuildFromGuildList(ctx context.Context, in *RemoveGuildFromGuildListRequest, opts ...grpc.CallOption) (*RemoveGuildFromGuildListResponse, error)
	GetGuild(ctx context.Context, in *GetGuildRequest, opts ...grpc.CallOption) (*GetGuildResponse, error)
	// This requires the "invites.view" permission.
	GetGuildInvites(ctx context.Context, in *GetGuildInvitesRequest, opts ...grpc.CallOption) (*GetGuildInvitesResponse, error)
	GetGuildMembers(ctx context.Context, in *GetGuildMembersRequest, opts ...grpc.CallOption) (*GetGuildMembersResponse, error)
	// You will only be informed of channels you have the "messages.view"
	// permission for.
	GetGuildChannels(ctx context.Context, in *GetGuildChannelsRequest, opts ...grpc.CallOption) (*GetGuildChannelsResponse, error)
	// This requires the "messages.view" permission.
	GetChannelMessages(ctx context.Context, in *GetChannelMessagesRequest, opts ...grpc.CallOption) (*GetChannelMessagesResponse, error)
	// This requires the "messages.view" permission.
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	GetEmotePacks(ctx context.Context, in *GetEmotePacksRequest, opts ...grpc.CallOption) (*GetEmotePacksResponse, error)
	GetEmotePackEmotes(ctx context.Context, in *GetEmotePackEmotesRequest, opts ...grpc.CallOption) (*GetEmotePackEmotesResponse, error)
	// This requires the "guild.manage.change-information" permission.
	UpdateGuildInformation(ctx context.Context, in *UpdateGuildInformationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "channels.manage.change-information" permission.
	UpdateChannelInformation(ctx context.Context, in *UpdateChannelInformationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "channels.manage.move" permission.
	UpdateChannelOrder(ctx context.Context, in *UpdateChannelOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "messages.send" permission.
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddEmoteToPack(ctx context.Context, in *AddEmoteToPackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "guild.manage.delete" permission.
	DeleteGuild(ctx context.Context, in *DeleteGuildRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "invites.manage.delete" permission.
	DeleteInvite(ctx context.Context, in *DeleteInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "channels.manage.delete" permission.
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "messages.manage.delete" permission if you are not the
	// message author.
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteEmoteFromPack(ctx context.Context, in *DeleteEmoteFromPackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteEmotePack(ctx context.Context, in *DeleteEmotePackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DequipEmotePack(ctx context.Context, in *DequipEmotePackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*JoinGuildResponse, error)
	LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "actions.trigger" permission.
	TriggerAction(ctx context.Context, in *TriggerActionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "messages.send" permission.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// This requires the "permissions.query" permission if you specify the As
	// field.
	QueryHasPermission(ctx context.Context, in *QueryPermissionsRequest, opts ...grpc.CallOption) (*QueryPermissionsResponse, error)
	// This requires the "permissions.manage.set" permission.
	SetPermissions(ctx context.Context, in *SetPermissionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "permissions.manage.get" permission.
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	// This requires the "roles.manage" permission.
	MoveRole(ctx context.Context, in *MoveRoleRequest, opts ...grpc.CallOption) (*MoveRoleResponse, error)
	// This requires the "roles.get" permission.
	GetGuildRoles(ctx context.Context, in *GetGuildRolesRequest, opts ...grpc.CallOption) (*GetGuildRolesResponse, error)
	// This requires the "roles.manage" permission.
	AddGuildRole(ctx context.Context, in *AddGuildRoleRequest, opts ...grpc.CallOption) (*AddGuildRoleResponse, error)
	// This requires the "roles.manage" permission.
	ModifyGuildRole(ctx context.Context, in *ModifyGuildRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "roles.manage" permission.
	DeleteGuildRole(ctx context.Context, in *DeleteGuildRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "roles.users.manage" permission.
	ManageUserRoles(ctx context.Context, in *ManageUserRolesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// This requires the "roles.users.get" permission.
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamEventsClient, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUserMetadata(ctx context.Context, in *GetUserMetadataRequest, opts ...grpc.CallOption) (*GetUserMetadataResponse, error)
	ProfileUpdate(ctx context.Context, in *ProfileUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Typing(ctx context.Context, in *TypingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateGuild(ctx context.Context, in *CreateGuildRequest, opts ...grpc.CallOption) (*CreateGuildResponse, error) {
	out := new(CreateGuildResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/CreateGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateInvite(ctx context.Context, in *CreateInviteRequest, opts ...grpc.CallOption) (*CreateInviteResponse, error) {
	out := new(CreateInviteResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/CreateInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateEmotePack(ctx context.Context, in *CreateEmotePackRequest, opts ...grpc.CallOption) (*CreateEmotePackResponse, error) {
	out := new(CreateEmotePackResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/CreateEmotePack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetGuildList(ctx context.Context, in *GetGuildListRequest, opts ...grpc.CallOption) (*GetGuildListResponse, error) {
	out := new(GetGuildListResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetGuildList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddGuildToGuildList(ctx context.Context, in *AddGuildToGuildListRequest, opts ...grpc.CallOption) (*AddGuildToGuildListResponse, error) {
	out := new(AddGuildToGuildListResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/AddGuildToGuildList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RemoveGuildFromGuildList(ctx context.Context, in *RemoveGuildFromGuildListRequest, opts ...grpc.CallOption) (*RemoveGuildFromGuildListResponse, error) {
	out := new(RemoveGuildFromGuildListResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/RemoveGuildFromGuildList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetGuild(ctx context.Context, in *GetGuildRequest, opts ...grpc.CallOption) (*GetGuildResponse, error) {
	out := new(GetGuildResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetGuildInvites(ctx context.Context, in *GetGuildInvitesRequest, opts ...grpc.CallOption) (*GetGuildInvitesResponse, error) {
	out := new(GetGuildInvitesResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetGuildInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetGuildMembers(ctx context.Context, in *GetGuildMembersRequest, opts ...grpc.CallOption) (*GetGuildMembersResponse, error) {
	out := new(GetGuildMembersResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetGuildMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetGuildChannels(ctx context.Context, in *GetGuildChannelsRequest, opts ...grpc.CallOption) (*GetGuildChannelsResponse, error) {
	out := new(GetGuildChannelsResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetGuildChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChannelMessages(ctx context.Context, in *GetChannelMessagesRequest, opts ...grpc.CallOption) (*GetChannelMessagesResponse, error) {
	out := new(GetChannelMessagesResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetChannelMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetEmotePacks(ctx context.Context, in *GetEmotePacksRequest, opts ...grpc.CallOption) (*GetEmotePacksResponse, error) {
	out := new(GetEmotePacksResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetEmotePacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetEmotePackEmotes(ctx context.Context, in *GetEmotePackEmotesRequest, opts ...grpc.CallOption) (*GetEmotePackEmotesResponse, error) {
	out := new(GetEmotePackEmotesResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetEmotePackEmotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateGuildInformation(ctx context.Context, in *UpdateGuildInformationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/UpdateGuildInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateChannelInformation(ctx context.Context, in *UpdateChannelInformationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/UpdateChannelInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateChannelOrder(ctx context.Context, in *UpdateChannelOrderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/UpdateChannelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddEmoteToPack(ctx context.Context, in *AddEmoteToPackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/AddEmoteToPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteGuild(ctx context.Context, in *DeleteGuildRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DeleteGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteInvite(ctx context.Context, in *DeleteInviteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DeleteInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteEmoteFromPack(ctx context.Context, in *DeleteEmoteFromPackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DeleteEmoteFromPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteEmotePack(ctx context.Context, in *DeleteEmotePackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DeleteEmotePack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DequipEmotePack(ctx context.Context, in *DequipEmotePackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DequipEmotePack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*JoinGuildResponse, error) {
	out := new(JoinGuildResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/JoinGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/LeaveGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) TriggerAction(ctx context.Context, in *TriggerActionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/TriggerAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) QueryHasPermission(ctx context.Context, in *QueryPermissionsRequest, opts ...grpc.CallOption) (*QueryPermissionsResponse, error) {
	out := new(QueryPermissionsResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/QueryHasPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SetPermissions(ctx context.Context, in *SetPermissionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/SetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) MoveRole(ctx context.Context, in *MoveRoleRequest, opts ...grpc.CallOption) (*MoveRoleResponse, error) {
	out := new(MoveRoleResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/MoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetGuildRoles(ctx context.Context, in *GetGuildRolesRequest, opts ...grpc.CallOption) (*GetGuildRolesResponse, error) {
	out := new(GetGuildRolesResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetGuildRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddGuildRole(ctx context.Context, in *AddGuildRoleRequest, opts ...grpc.CallOption) (*AddGuildRoleResponse, error) {
	out := new(AddGuildRoleResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/AddGuildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ModifyGuildRole(ctx context.Context, in *ModifyGuildRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/ModifyGuildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteGuildRole(ctx context.Context, in *DeleteGuildRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/DeleteGuildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ManageUserRoles(ctx context.Context, in *ManageUserRolesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/ManageUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/protocol.chat.v1.ChatService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceStreamEventsClient{stream}
	return x, nil
}

type ChatService_StreamEventsClient interface {
	Send(*StreamEventsRequest) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type chatServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *chatServiceStreamEventsClient) Send(m *StreamEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceStreamEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetUserMetadata(ctx context.Context, in *GetUserMetadataRequest, opts ...grpc.CallOption) (*GetUserMetadataResponse, error) {
	out := new(GetUserMetadataResponse)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/GetUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ProfileUpdate(ctx context.Context, in *ProfileUpdateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/ProfileUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Typing(ctx context.Context, in *TypingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protocol.chat.v1.ChatService/Typing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	// This doesn't require any permissions.
	CreateGuild(context.Context, *CreateGuildRequest) (*CreateGuildResponse, error)
	// This requires the "invites.manage.create" permission.
	CreateInvite(context.Context, *CreateInviteRequest) (*CreateInviteResponse, error)
	// This requires the "channels.manage.create" permission.
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	CreateEmotePack(context.Context, *CreateEmotePackRequest) (*CreateEmotePackResponse, error)
	GetGuildList(context.Context, *GetGuildListRequest) (*GetGuildListResponse, error)
	AddGuildToGuildList(context.Context, *AddGuildToGuildListRequest) (*AddGuildToGuildListResponse, error)
	RemoveGuildFromGuildList(context.Context, *RemoveGuildFromGuildListRequest) (*RemoveGuildFromGuildListResponse, error)
	GetGuild(context.Context, *GetGuildRequest) (*GetGuildResponse, error)
	// This requires the "invites.view" permission.
	GetGuildInvites(context.Context, *GetGuildInvitesRequest) (*GetGuildInvitesResponse, error)
	GetGuildMembers(context.Context, *GetGuildMembersRequest) (*GetGuildMembersResponse, error)
	// You will only be informed of channels you have the "messages.view"
	// permission for.
	GetGuildChannels(context.Context, *GetGuildChannelsRequest) (*GetGuildChannelsResponse, error)
	// This requires the "messages.view" permission.
	GetChannelMessages(context.Context, *GetChannelMessagesRequest) (*GetChannelMessagesResponse, error)
	// This requires the "messages.view" permission.
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	GetEmotePacks(context.Context, *GetEmotePacksRequest) (*GetEmotePacksResponse, error)
	GetEmotePackEmotes(context.Context, *GetEmotePackEmotesRequest) (*GetEmotePackEmotesResponse, error)
	// This requires the "guild.manage.change-information" permission.
	UpdateGuildInformation(context.Context, *UpdateGuildInformationRequest) (*empty.Empty, error)
	// This requires the "channels.manage.change-information" permission.
	UpdateChannelInformation(context.Context, *UpdateChannelInformationRequest) (*empty.Empty, error)
	// This requires the "channels.manage.move" permission.
	UpdateChannelOrder(context.Context, *UpdateChannelOrderRequest) (*empty.Empty, error)
	// This requires the "messages.send" permission.
	UpdateMessage(context.Context, *UpdateMessageRequest) (*empty.Empty, error)
	AddEmoteToPack(context.Context, *AddEmoteToPackRequest) (*empty.Empty, error)
	// This requires the "guild.manage.delete" permission.
	DeleteGuild(context.Context, *DeleteGuildRequest) (*empty.Empty, error)
	// This requires the "invites.manage.delete" permission.
	DeleteInvite(context.Context, *DeleteInviteRequest) (*empty.Empty, error)
	// This requires the "channels.manage.delete" permission.
	DeleteChannel(context.Context, *DeleteChannelRequest) (*empty.Empty, error)
	// This requires the "messages.manage.delete" permission if you are not the
	// message author.
	DeleteMessage(context.Context, *DeleteMessageRequest) (*empty.Empty, error)
	DeleteEmoteFromPack(context.Context, *DeleteEmoteFromPackRequest) (*empty.Empty, error)
	DeleteEmotePack(context.Context, *DeleteEmotePackRequest) (*empty.Empty, error)
	DequipEmotePack(context.Context, *DequipEmotePackRequest) (*empty.Empty, error)
	JoinGuild(context.Context, *JoinGuildRequest) (*JoinGuildResponse, error)
	LeaveGuild(context.Context, *LeaveGuildRequest) (*empty.Empty, error)
	// This requires the "actions.trigger" permission.
	TriggerAction(context.Context, *TriggerActionRequest) (*empty.Empty, error)
	// This requires the "messages.send" permission.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// This requires the "permissions.query" permission if you specify the As
	// field.
	QueryHasPermission(context.Context, *QueryPermissionsRequest) (*QueryPermissionsResponse, error)
	// This requires the "permissions.manage.set" permission.
	SetPermissions(context.Context, *SetPermissionsRequest) (*empty.Empty, error)
	// This requires the "permissions.manage.get" permission.
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)
	// This requires the "roles.manage" permission.
	MoveRole(context.Context, *MoveRoleRequest) (*MoveRoleResponse, error)
	// This requires the "roles.get" permission.
	GetGuildRoles(context.Context, *GetGuildRolesRequest) (*GetGuildRolesResponse, error)
	// This requires the "roles.manage" permission.
	AddGuildRole(context.Context, *AddGuildRoleRequest) (*AddGuildRoleResponse, error)
	// This requires the "roles.manage" permission.
	ModifyGuildRole(context.Context, *ModifyGuildRoleRequest) (*empty.Empty, error)
	// This requires the "roles.manage" permission.
	DeleteGuildRole(context.Context, *DeleteGuildRoleRequest) (*empty.Empty, error)
	// This requires the "roles.users.manage" permission.
	ManageUserRoles(context.Context, *ManageUserRolesRequest) (*empty.Empty, error)
	// This requires the "roles.users.get" permission.
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	StreamEvents(ChatService_StreamEventsServer) error
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUserMetadata(context.Context, *GetUserMetadataRequest) (*GetUserMetadataResponse, error)
	ProfileUpdate(context.Context, *ProfileUpdateRequest) (*empty.Empty, error)
	Typing(context.Context, *TypingRequest) (*empty.Empty, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) CreateGuild(context.Context, *CreateGuildRequest) (*CreateGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuild not implemented")
}
func (*UnimplementedChatServiceServer) CreateInvite(context.Context, *CreateInviteRequest) (*CreateInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvite not implemented")
}
func (*UnimplementedChatServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (*UnimplementedChatServiceServer) CreateEmotePack(context.Context, *CreateEmotePackRequest) (*CreateEmotePackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmotePack not implemented")
}
func (*UnimplementedChatServiceServer) GetGuildList(context.Context, *GetGuildListRequest) (*GetGuildListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildList not implemented")
}
func (*UnimplementedChatServiceServer) AddGuildToGuildList(context.Context, *AddGuildToGuildListRequest) (*AddGuildToGuildListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuildToGuildList not implemented")
}
func (*UnimplementedChatServiceServer) RemoveGuildFromGuildList(context.Context, *RemoveGuildFromGuildListRequest) (*RemoveGuildFromGuildListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGuildFromGuildList not implemented")
}
func (*UnimplementedChatServiceServer) GetGuild(context.Context, *GetGuildRequest) (*GetGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuild not implemented")
}
func (*UnimplementedChatServiceServer) GetGuildInvites(context.Context, *GetGuildInvitesRequest) (*GetGuildInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildInvites not implemented")
}
func (*UnimplementedChatServiceServer) GetGuildMembers(context.Context, *GetGuildMembersRequest) (*GetGuildMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildMembers not implemented")
}
func (*UnimplementedChatServiceServer) GetGuildChannels(context.Context, *GetGuildChannelsRequest) (*GetGuildChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildChannels not implemented")
}
func (*UnimplementedChatServiceServer) GetChannelMessages(context.Context, *GetChannelMessagesRequest) (*GetChannelMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelMessages not implemented")
}
func (*UnimplementedChatServiceServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedChatServiceServer) GetEmotePacks(context.Context, *GetEmotePacksRequest) (*GetEmotePacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmotePacks not implemented")
}
func (*UnimplementedChatServiceServer) GetEmotePackEmotes(context.Context, *GetEmotePackEmotesRequest) (*GetEmotePackEmotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmotePackEmotes not implemented")
}
func (*UnimplementedChatServiceServer) UpdateGuildInformation(context.Context, *UpdateGuildInformationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuildInformation not implemented")
}
func (*UnimplementedChatServiceServer) UpdateChannelInformation(context.Context, *UpdateChannelInformationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelInformation not implemented")
}
func (*UnimplementedChatServiceServer) UpdateChannelOrder(context.Context, *UpdateChannelOrderRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelOrder not implemented")
}
func (*UnimplementedChatServiceServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedChatServiceServer) AddEmoteToPack(context.Context, *AddEmoteToPackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmoteToPack not implemented")
}
func (*UnimplementedChatServiceServer) DeleteGuild(context.Context, *DeleteGuildRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuild not implemented")
}
func (*UnimplementedChatServiceServer) DeleteInvite(context.Context, *DeleteInviteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvite not implemented")
}
func (*UnimplementedChatServiceServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (*UnimplementedChatServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (*UnimplementedChatServiceServer) DeleteEmoteFromPack(context.Context, *DeleteEmoteFromPackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmoteFromPack not implemented")
}
func (*UnimplementedChatServiceServer) DeleteEmotePack(context.Context, *DeleteEmotePackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmotePack not implemented")
}
func (*UnimplementedChatServiceServer) DequipEmotePack(context.Context, *DequipEmotePackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DequipEmotePack not implemented")
}
func (*UnimplementedChatServiceServer) JoinGuild(context.Context, *JoinGuildRequest) (*JoinGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGuild not implemented")
}
func (*UnimplementedChatServiceServer) LeaveGuild(context.Context, *LeaveGuildRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGuild not implemented")
}
func (*UnimplementedChatServiceServer) TriggerAction(context.Context, *TriggerActionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAction not implemented")
}
func (*UnimplementedChatServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedChatServiceServer) QueryHasPermission(context.Context, *QueryPermissionsRequest) (*QueryPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHasPermission not implemented")
}
func (*UnimplementedChatServiceServer) SetPermissions(context.Context, *SetPermissionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPermissions not implemented")
}
func (*UnimplementedChatServiceServer) GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedChatServiceServer) MoveRole(context.Context, *MoveRoleRequest) (*MoveRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveRole not implemented")
}
func (*UnimplementedChatServiceServer) GetGuildRoles(context.Context, *GetGuildRolesRequest) (*GetGuildRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildRoles not implemented")
}
func (*UnimplementedChatServiceServer) AddGuildRole(context.Context, *AddGuildRoleRequest) (*AddGuildRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuildRole not implemented")
}
func (*UnimplementedChatServiceServer) ModifyGuildRole(context.Context, *ModifyGuildRoleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGuildRole not implemented")
}
func (*UnimplementedChatServiceServer) DeleteGuildRole(context.Context, *DeleteGuildRoleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuildRole not implemented")
}
func (*UnimplementedChatServiceServer) ManageUserRoles(context.Context, *ManageUserRolesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageUserRoles not implemented")
}
func (*UnimplementedChatServiceServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (*UnimplementedChatServiceServer) StreamEvents(ChatService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (*UnimplementedChatServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedChatServiceServer) GetUserMetadata(context.Context, *GetUserMetadataRequest) (*GetUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMetadata not implemented")
}
func (*UnimplementedChatServiceServer) ProfileUpdate(context.Context, *ProfileUpdateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileUpdate not implemented")
}
func (*UnimplementedChatServiceServer) Typing(context.Context, *TypingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Typing not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_CreateGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/CreateGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateGuild(ctx, req.(*CreateGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/CreateInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateInvite(ctx, req.(*CreateInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateEmotePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmotePackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateEmotePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/CreateEmotePack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateEmotePack(ctx, req.(*CreateEmotePackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetGuildList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetGuildList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetGuildList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetGuildList(ctx, req.(*GetGuildListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddGuildToGuildList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGuildToGuildListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddGuildToGuildList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/AddGuildToGuildList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddGuildToGuildList(ctx, req.(*AddGuildToGuildListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RemoveGuildFromGuildList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGuildFromGuildListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RemoveGuildFromGuildList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/RemoveGuildFromGuildList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RemoveGuildFromGuildList(ctx, req.(*RemoveGuildFromGuildListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetGuild(ctx, req.(*GetGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetGuildInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetGuildInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetGuildInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetGuildInvites(ctx, req.(*GetGuildInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetGuildMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetGuildMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetGuildMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetGuildMembers(ctx, req.(*GetGuildMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetGuildChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetGuildChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetGuildChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetGuildChannels(ctx, req.(*GetGuildChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChannelMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChannelMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetChannelMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChannelMessages(ctx, req.(*GetChannelMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetEmotePacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmotePacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetEmotePacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetEmotePacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetEmotePacks(ctx, req.(*GetEmotePacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetEmotePackEmotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmotePackEmotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetEmotePackEmotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetEmotePackEmotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetEmotePackEmotes(ctx, req.(*GetEmotePackEmotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateGuildInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuildInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateGuildInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/UpdateGuildInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateGuildInformation(ctx, req.(*UpdateGuildInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateChannelInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateChannelInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/UpdateChannelInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateChannelInformation(ctx, req.(*UpdateChannelInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateChannelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateChannelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/UpdateChannelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateChannelOrder(ctx, req.(*UpdateChannelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddEmoteToPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmoteToPackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddEmoteToPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/AddEmoteToPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddEmoteToPack(ctx, req.(*AddEmoteToPackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DeleteGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteGuild(ctx, req.(*DeleteGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DeleteInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteInvite(ctx, req.(*DeleteInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteEmoteFromPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmoteFromPackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteEmoteFromPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DeleteEmoteFromPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteEmoteFromPack(ctx, req.(*DeleteEmoteFromPackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteEmotePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmotePackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteEmotePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DeleteEmotePack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteEmotePack(ctx, req.(*DeleteEmotePackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DequipEmotePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequipEmotePackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DequipEmotePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DequipEmotePack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DequipEmotePack(ctx, req.(*DequipEmotePackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/JoinGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinGuild(ctx, req.(*JoinGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LeaveGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LeaveGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/LeaveGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LeaveGuild(ctx, req.(*LeaveGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_TriggerAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TriggerAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/TriggerAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TriggerAction(ctx, req.(*TriggerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_QueryHasPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).QueryHasPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/QueryHasPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).QueryHasPermission(ctx, req.(*QueryPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/SetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SetPermissions(ctx, req.(*SetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_MoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).MoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/MoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).MoveRole(ctx, req.(*MoveRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetGuildRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetGuildRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetGuildRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetGuildRoles(ctx, req.(*GetGuildRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/AddGuildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddGuildRole(ctx, req.(*AddGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ModifyGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ModifyGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/ModifyGuildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ModifyGuildRole(ctx, req.(*ModifyGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/DeleteGuildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteGuildRole(ctx, req.(*DeleteGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ManageUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ManageUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/ManageUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ManageUserRoles(ctx, req.(*ManageUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).StreamEvents(&chatServiceStreamEventsServer{stream})
}

type ChatService_StreamEventsServer interface {
	Send(*Event) error
	Recv() (*StreamEventsRequest, error)
	grpc.ServerStream
}

type chatServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *chatServiceStreamEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceStreamEventsServer) Recv() (*StreamEventsRequest, error) {
	m := new(StreamEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/GetUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUserMetadata(ctx, req.(*GetUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/ProfileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ProfileUpdate(ctx, req.(*ProfileUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Typing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Typing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.chat.v1.ChatService/Typing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Typing(ctx, req.(*TypingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.chat.v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGuild",
			Handler:    _ChatService_CreateGuild_Handler,
		},
		{
			MethodName: "CreateInvite",
			Handler:    _ChatService_CreateInvite_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChatService_CreateChannel_Handler,
		},
		{
			MethodName: "CreateEmotePack",
			Handler:    _ChatService_CreateEmotePack_Handler,
		},
		{
			MethodName: "GetGuildList",
			Handler:    _ChatService_GetGuildList_Handler,
		},
		{
			MethodName: "AddGuildToGuildList",
			Handler:    _ChatService_AddGuildToGuildList_Handler,
		},
		{
			MethodName: "RemoveGuildFromGuildList",
			Handler:    _ChatService_RemoveGuildFromGuildList_Handler,
		},
		{
			MethodName: "GetGuild",
			Handler:    _ChatService_GetGuild_Handler,
		},
		{
			MethodName: "GetGuildInvites",
			Handler:    _ChatService_GetGuildInvites_Handler,
		},
		{
			MethodName: "GetGuildMembers",
			Handler:    _ChatService_GetGuildMembers_Handler,
		},
		{
			MethodName: "GetGuildChannels",
			Handler:    _ChatService_GetGuildChannels_Handler,
		},
		{
			MethodName: "GetChannelMessages",
			Handler:    _ChatService_GetChannelMessages_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _ChatService_GetMessage_Handler,
		},
		{
			MethodName: "GetEmotePacks",
			Handler:    _ChatService_GetEmotePacks_Handler,
		},
		{
			MethodName: "GetEmotePackEmotes",
			Handler:    _ChatService_GetEmotePackEmotes_Handler,
		},
		{
			MethodName: "UpdateGuildInformation",
			Handler:    _ChatService_UpdateGuildInformation_Handler,
		},
		{
			MethodName: "UpdateChannelInformation",
			Handler:    _ChatService_UpdateChannelInformation_Handler,
		},
		{
			MethodName: "UpdateChannelOrder",
			Handler:    _ChatService_UpdateChannelOrder_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ChatService_UpdateMessage_Handler,
		},
		{
			MethodName: "AddEmoteToPack",
			Handler:    _ChatService_AddEmoteToPack_Handler,
		},
		{
			MethodName: "DeleteGuild",
			Handler:    _ChatService_DeleteGuild_Handler,
		},
		{
			MethodName: "DeleteInvite",
			Handler:    _ChatService_DeleteInvite_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChatService_DeleteChannel_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteEmoteFromPack",
			Handler:    _ChatService_DeleteEmoteFromPack_Handler,
		},
		{
			MethodName: "DeleteEmotePack",
			Handler:    _ChatService_DeleteEmotePack_Handler,
		},
		{
			MethodName: "DequipEmotePack",
			Handler:    _ChatService_DequipEmotePack_Handler,
		},
		{
			MethodName: "JoinGuild",
			Handler:    _ChatService_JoinGuild_Handler,
		},
		{
			MethodName: "LeaveGuild",
			Handler:    _ChatService_LeaveGuild_Handler,
		},
		{
			MethodName: "TriggerAction",
			Handler:    _ChatService_TriggerAction_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "QueryHasPermission",
			Handler:    _ChatService_QueryHasPermission_Handler,
		},
		{
			MethodName: "SetPermissions",
			Handler:    _ChatService_SetPermissions_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _ChatService_GetPermissions_Handler,
		},
		{
			MethodName: "MoveRole",
			Handler:    _ChatService_MoveRole_Handler,
		},
		{
			MethodName: "GetGuildRoles",
			Handler:    _ChatService_GetGuildRoles_Handler,
		},
		{
			MethodName: "AddGuildRole",
			Handler:    _ChatService_AddGuildRole_Handler,
		},
		{
			MethodName: "ModifyGuildRole",
			Handler:    _ChatService_ModifyGuildRole_Handler,
		},
		{
			MethodName: "DeleteGuildRole",
			Handler:    _ChatService_DeleteGuildRole_Handler,
		},
		{
			MethodName: "ManageUserRoles",
			Handler:    _ChatService_ManageUserRoles_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _ChatService_GetUserRoles_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ChatService_GetUser_Handler,
		},
		{
			MethodName: "GetUserMetadata",
			Handler:    _ChatService_GetUserMetadata_Handler,
		},
		{
			MethodName: "ProfileUpdate",
			Handler:    _ChatService_ProfileUpdate_Handler,
		},
		{
			MethodName: "Typing",
			Handler:    _ChatService_Typing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _ChatService_StreamEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat/v1/chat.proto",
}
